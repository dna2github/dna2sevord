server {
      listen    80 default;
      server_name _;
      ## redirect http to https ##
      return    301 https://$host$request_uri;
}

# Settings for a TLS enabled server.
server {
    listen       443 ssl http2 default_server;
    listen       [::]:443 ssl http2 default_server;
    server_name  _;
    root         /usr/share/nginx/html;

    ssl_certificate "cert.pem";
    ssl_certificate_key "cert.key";
    ssl_session_cache shared:SSL:1m;
    ssl_session_timeout  10m;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    location / {
    }

    error_page 404 /404.html;
        location = /40x.html {
    }

    error_page 500 502 503 504 /50x.html;
        location = /50x.html {
    }
}

server {
    listen       443 ssl;
    server_name  <dns>;

    keepalive_timeout   60;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_certificate     /path/to/some.pem;
    ssl_certificate_key /path/to/some.key;


    location /dev {
       access_log off; # <-- no access and error log
       error_log /dev/null;
       root /opt/blitz/static;
    }
}

# partial
    location ^~ /payments {
       return 404;

       rewrite ^/payments(/.*)$ $1 break; # <self>/payments/hello -> <site>/hello

       proxy_pass https://<site>;
       proxy_set_header Host <site>;
    }
    
    location /utils/static/file {
       root /path/to/static;
       etag off;
       add_header Last-Modified $date_gmt;
       add_header Content-Type application/json;
    }

# cache_path.subconf in nginx.conf
# add to cache.subconf | proxy_cache <key>;
proxy_cache_path /path/to/cache/folder keys_zone=<key, e.g. cache-api>:<size, e.g. 10m>;

# cache.subconf
    proxy_ignore_headers Cache-Control;
    proxy_cache_valid 302 10m;
    proxy_cache_valid 404  1m;
    proxy_cache_valid any  2h;
    proxy_cache_use_stale error; # if error, use prev content
    #proxy_cache_bypass $cookie_nocache $arg_nocache$arg_comment;
    #proxy_cache_bypass $http_pragma    $http_authorization;

# cors.subconf
    if ($request_method = "OPTIONS") {
       #add_header "Access-Control-Allow-Origin" "192.168.*, 127.0.0.1, localhost:3000";
       add_header "Access-Control-Allow-Origin" "*" always;
       add_header "Access-Control-Allow-Headers" "*" always;
       add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD" always;
       #add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
       add_header Access-Control-Allow-Credentials "true" always;
       add_header Content-Length 0;
       add_header Host $host;
       return 200;
    }
    add_header Access-Control-Allow-Origin  "*" always;
    add_header Access-Control-Allow-Headers "*" always;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, HEAD" always;
    add_header Access-Control-Allow-Credentials "true" always;
    #add_header Access-Control-Allow-Headers "DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization";

# websocket.subconf
        proxy_http_version 1.1;
        proxy_set_header   Upgrade $http_upgrade;
        proxy_set_header   Connection "Upgrade";
        proxy_cache_bypass $http_upgrade;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;

# proxy.subconf
       proxy_ssl_server_name on;
       proxy_set_header   Connection keep-alive;
       proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header   X-Forwarded-Proto $scheme;
       proxy_hide_header 'access-control-allow-origin';

